
<script src="~/lib/daypilot/daypilot-all.min.js" asp-append-version="true"></script>

<style>
    .main {
        display: flex;
    }

    .left {
        margin-right: 10px;
    }

    .right {
        flex-grow: 1;
    }

    /* date picker */
    .navigator_default_busy.navigator_default_cell .navigator_default_cell_text {
        box-sizing: border-box;
        background-color: #aaaaaa;
        color: #ffffff;
        border-radius: 50%;
    }

    .navigator_default_select .navigator_default_cell_box {
        background-color: transparent;
        opacity: 1;
    }

    body .navigator_default_cell.navigator_default_select .navigator_default_cell_text {
        background-color: #666666;
        color: #ffffff;
        border-radius: 50%;
        opacity: 1;
    }

    .navigator_default_todaybox {
        border: none;
    }

    .navigator_default_today .navigator_default_cell_text {
        text-decoration: underline;
    }

    /* calendar events */
    body .calendar_default_event_inner {
        border-radius: 15px;
        background: #999999;
        border: 1px solid #666666;
    }

    body .calendar_default_shadow,
    body .calendar_default_shadow_inner {
        border-radius: 15px;
    }

    /* calendar header active areas */
    .area_action {
        background-color: #666666;
        color: #ffffff;
        border-radius: 50%;
        padding: 5px;
        cursor: pointer;
        box-sizing: border-box;
    }

        .area_action:hover {
            background-color: #ffa216;
        }

</style>

<div class="main">
    <div class="left">
        <div id="datepicker"></div>
    </div>
    <div class="right">
        <div class="buttons">
            <button id="previous">Previous</button>
            <button id="today">Today</button>
            <button id="next">Next</button>
        </div>
        <div id="calendar"></div>
    </div>
</div>

<script>
    const calendar = new DayPilot.Calendar("calendar", {
      viewType: "Resources",
      durationBarVisible: false,
      onTimeRangeSelected: async (args) => {
        const modal = await DayPilot.Modal.prompt("Create a new event:", "Event 1");
        calendar.clearSelection();
        if (modal.canceled) {
          return;
        }

        const event = {
          start: args.start,
          end: args.end,
          resource: args.resource,
          text: modal.result
        };
        const { data } = await DayPilot.Http.post(`/api/events`, event);

        calendar.events.add({
          start: args.start,
          end: args.end,
          id: data.id,
          text: modal.result,
          resource: args.resource
        });

      },
      onEventMoved: async (args) => {
        const params = {
          id: args.e.id(),
          start: args.newStart,
          end: args.newEnd,
          resource: args.newResource,
          text: args.e.text()
        };
        await DayPilot.Http.put(`/api/events/${params.id}`, params);
      },
      onEventResized: async (args) => {
        const params = {
          id: args.e.id(),
          start: args.newStart,
          end: args.newEnd,
                  resource: args.newResource,
                  text: args.e.text()
        };
        await DayPilot.Http.put(`/api/events/${params.id}`, params);
      },
      onEventClick: async (args) => {
          const colors = [
              { name: "Blue", id: "#a3cbe9" },
              { name: "Green", id: "#b4d7a1" },
              { name: "Yellow", id: "#f6e6b8" },
              { name: "Red", id: "#e9a1a1" },
          ];
        const form = [
          {name: "Name", id: "text"},
          {name: "Color", id: "color", type: "select", options: colors}
        ];

        const modal = await DayPilot.Modal.form(form, args.e.data);
        if (modal.canceled) {
          return;
        }

            const data = {
        id: args.e.id(),
        start: new DayPilot.Date(args.e.start()), // Ensure valid format
        end: new DayPilot.Date(args.e.end()),     // Ensure valid format
        resource: args.e.resource(),
        text: modal.result.text,
        color: modal.result.color
    };


      await DayPilot.Http.put(`/api/events/${data.id}`, data);

        calendar.events.update({
          ...args.e.data,
          text: modal.result.text,
          color: modal.result.color
        });
        console.log("Updated.");
      },
      onBeforeEventRender: args => {
        args.data.backColor = args.data.color;
        args.data.borderColor = "darker";
      },
      onBeforeHeaderRender: args => {
          args.header.verticalAlignment = "top";
          args.header.areas = [
              {
                  left: "calc(50% - 15px)",
                  bottom: 5,
                  width: 30,
                  height: 30,
                  symbol: "icons/daypilot.svg#edit",
                  cssClass: "area_action",
                  onClick: async args => {
                      const column = args.source;
                      console.log("column", column);
                      const modal = await DayPilot.Modal.prompt("Resource name:", column.name);
                      if (modal.canceled) {
                          return true;
                      }
                      const columns = calendar.columns.list.map(c => c.id === column.id ? {...c, name: modal.result} : c);
                      calendar.update({columns});
                  }
              }
          ];
      },
      headerHeight: 60,
    });
    calendar.init();

    const datepicker = new DayPilot.Navigator("datepicker", {
      selectMode: "Day",
      showMonths: 3,
      skipMonths: 3,
      onTimeRangeSelected: args => {
        calendar.update({
          startDate: args.start,
        });
        app.loadCalendarData();
      },
      onVisibleRangeChanged: args => {
        app.loadDatePickerData();
      }
    });
    datepicker.init();


    const app = {
      elements: {
        previous: document.getElementById("previous"),
        today: document.getElementById("today"),
        next: document.getElementById("next")
      },
      async loadCalendarData() {
        const start = calendar.visibleStart();
        const end = calendar.visibleEnd();

        const promiseEvents = DayPilot.Http.get(`/api/events?start=${start}&end=${end}`);
        const promiseResources = DayPilot.Http.get("/api/resources");

        const [{data: columns}, {data: events}] = await Promise.all([promiseResources, promiseEvents]);

        calendar.update({
          columns,
          events
        });
      },
      async loadDatePickerData() {
        const start = datepicker.visibleStart();
        const end = datepicker.visibleEnd();

        const {data} = await DayPilot.Http.get(`/api/events?start=${start}&end=${end}`);
        datepicker.update({events: data});
      },
      addHandlers() {
        app.elements.previous.addEventListener("click", () => {
          const current = datepicker.selectionDay;
          datepicker.select(current.addDays(-1));
        });
        app.elements.next.addEventListener("click", () => {
          const current = datepicker.selectionDay;
          datepicker.select(current.addDays(1));
        });
        app.elements.today.addEventListener("click", () => {
          datepicker.select(DayPilot.Date.today());
        });
      },
      init() {
        app.addHandlers();
        app.loadCalendarData();
        app.loadDatePickerData();
      }
    };

    app.init();

</script>